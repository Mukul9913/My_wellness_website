import { useState } from "react"

interface Question {
  label: string
  name: string
  options: string[]
}

interface WellnessSurveyModalProps {
  open: boolean
  onClose: () => void
}

interface Answers {
  [key: string]: string
}

const questions: Question[] = [
  {
    label: "1. рдХреНрдпрд╛ рдЖрдк exercise рдпрд╛ yoga рдХрд░рдиреЗ рдХреЗ рдмрд╛рдж рдЕрдкрдиреА fitness рдФрд░ energy level рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдкреВрд░реА рддрд░рд╣ рд╕рдВрддреБрд╖реНрдЯ рдорд╣рд╕реВрд╕ рдХрд░рддреЗ рд╣реИрдВ?",
    name: "q1",
    options: [
      "тЬУ рд╣рд╛рдБ, рдореИрдВ рдкреВрд░реА рддрд░рд╣ рд╕рдВрддреБрд╖реНрдЯ рд╣реВрдБ",
      "тЬЧ рдирд╣реАрдВ, рдкреВрд░реА рддрд░рд╣ рд╕рдВрддреБрд╖реНрдЯ рдирд╣реАрдВ рдорд╣рд╕реВрд╕ рдХрд░рддрд╛/рдХрд░рддреА",
    ],
  },
  {
    label: "2. рдХреНрдпрд╛ рдЖрдк рдЕрдкрдиреЗ рдкрд░рд┐рд╡рд╛рд░ рдХреА health рдХреЛ рдмреЗрд╣рддрд░ рдмрдирд╛рдиреЗ рдХреЗ рд▓рд┐рдП рд╕рдХреНрд░рд┐рдп рд░реВрдк рд╕реЗ рдХреЛрд╢рд┐рд╢ рдХрд░ рд░рд╣реЗ рд╣реИрдВ?",
    name: "q2",
    options: [
      "тЬУ рдЬреА рд╣рд╛рдБ, рдкреВрд░реА рдХреЛрд╢рд┐рд╢",
      "тЬЧ рдХрднреА-рдХрднрд╛рд░ рд╣реА",
    ],
  },
  {
    label: "3. рдЗрддрдиреА рдореЗрд╣рдирдд рдХреЗ рдмрд╛рд╡рдЬреВрдж рднреА рдХреНрдпрд╛ рдЖрдкрдХреЛ рд▓рдЧрддрд╛ рд╣реИ рдХрд┐ рдЖрдкрдХреЗ рдкрд░рд┐рд╡рд╛рд░ рдХреЛ рд╡рд╣ рдареЛрд╕ рдкрд░рд┐рдгрд╛рдо рдирд╣реАрдВ рдорд┐рд▓ рд░рд╣реЗ рдЬрд┐рд╕рдХреА рдЙрдореНрдореАрдж рдереА?",
    name: "q3",
    options: [
      "тЬУ рд╕рд╣реА рдХрд╣рд╛, results slow рд╣реИрдВ",
      "тЬЧ рдирд╣реАрдВ, results рдЕрдЪреНрдЫреЗ рд╣реИрдВ",
    ],
  },
  {
    label: "4. рдХреНрдпрд╛ рдЖрдк рдЬрд╛рдирддреЗ рд╣реИрдВ рдХрд┐ рдЧрд▓рдд quality рдХрд╛ рдкрд╛рдиреА рдЖрдкрдХреЗ рд╢рд░реАрд░ рдореЗрдВ toxins рдмрдврд╝рд╛рдХрд░ рд╕рднреА wellness efforts рдХреЛ рдмрд░реНрдмрд╛рдж рдХрд░ рд╕рдХрддрд╛ рд╣реИ?",
    name: "q4",
    options: [
      "тЬУ рдЬреА рд╣рд╛рдБ, рдкрддрд╛ рд╣реИ",
      "тЬЧ рдирд╣реАрдВ, рдпрд╣ рдирдпрд╛ рд╣реИ",
    ],
  },
  {
    label: "5. рдХреНрдпрд╛ рдЖрдк рдЕрдкрдиреЗ рдкрд░рд┐рд╡рд╛рд░ рдХреЛ pesticides-free рднреЛрдЬрди рджреЗрдиреЗ рдХреЗ рд▓рд┐рдП рдХреЛрдИ рд╡рд┐рд╢реЗрд╖ рдкреНрд░рдпрд╛рд╕ рдХрд░ рд░рд╣реЗ рд╣реИрдВ?",
    name: "q5",
    options: [
      "тЬУ рд╣рд╛рдБ, organic рдЦрд╛рдирд╛",
      "тЬЧ рдирд╣реАрдВ, normal рд╕рдмреНрдЬреА",
    ],
  },
  {
    label: "6. рдХреНрдпрд╛ рдЖрдк рдЬрд╛рдирддреЗ рд╣реИрдВ рдХрд┐ pesticides рдПрдХ рдкреНрд░рдХрд╛рд░ рдХрд╛ рдЬрд╣рд░ рд╣реИ рдЬреЛ cancer, liver damage рдФрд░ рдЧрдВрднреАрд░ рдмреАрдорд╛рд░рд┐рдпрд╛рдБ рд▓рд╛ рд╕рдХрддрд╛ рд╣реИ?",
    name: "q6",
    options: [
      "тЬУ рдЬреА рд╣рд╛рдБ, рдбрд░рд╛рд╡рдирд╛ рд╣реИ",
      "тЬЧ рдирд╣реАрдВ рдкрддрд╛ рдерд╛",
    ],
  },
  {
    label: "7. рдХреНрдпрд╛ рдЕрднреА рдЖрдк рдпрд╛ рдЖрдкрдХреЗ рдЬрд╛рдирдиреЗ рд╡рд╛рд▓реЗ рдкрд░рд┐рд╡рд╛рд░/рджреЛрд╕реНрддреЛрдВ рдореЗрдВ рдХреЛрдИ health issues face рдХрд░ рд░рд╣рд╛ рд╣реИ?",
    name: "q7",
    options: [
      "тЬУ рдЬреА рд╣рд╛рдБ, рдХреБрдЫ problems рд╣реИрдВ",
      "тЬЧ рд╕рднреА рдареАрдХ рд╣реИрдВ",
    ],
  },
  {
    label: "8. рдХреНрдпрд╛ рдЖрдк рдЙрдиреНрд╣реЗрдВ рднреА рдЗрд╕ FREE wellness workshop рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдмрддрд╛рдирд╛ рдЪрд╛рд╣реЗрдВрдЧреЗ рдЬреЛ рдЙрдирдХреА problems solve рдХрд░ рд╕рдХрддреА рд╣реИ?",
    name: "q8",
    options: [
      "тЬУ рдЬрд░реВрд░, рд╕рдмрдХреА help рдХрд░рдиреА рд╣реИ",
      "тЬЧ рдкрд╣рд▓реЗ рдЦреБрдж рдЬрд╛рдиреВрдВрдЧрд╛",
    ],
  },
  {
    label: "9. рдЕрдЧрд░ рдореИрдВ рдЖрдкрдХреЛ рдмрддрд╛рдКрдВ рдХрд┐ рдЖрдк рдЕрдкрдиреА health improve рдХрд░ рд╕рдХреЗрдВ рдФрд░ рд╕рд╛рде рд╣реА рдШрд░ рд╕реЗ harmful pesticides рдХреЛ рднреЛрдЬрди рд╕реЗ рдирд┐рдХрд╛рд▓ рднреА рд╕рдХреЗрдВ - рддреЛ рдЖрдк рдХрдм рдЗрд╕реЗ рдЬрд╛рдирдирд╛ рдЪрд╛рд╣реЗрдВрдЧреЗ?",
    name: "q9",
    options: [
      "ЁЯФе рдЕрднреА рддреБрд░рдВрдд!",
      "ЁЯУЕ рдЬрд▓реНрджреА рд╣реА",
    ],
  },
  {
    label: "10. рдХреНрдпрд╛ рдЖрдк рдЕрдкрдиреЗ рдкрд░рд┐рд╡рд╛рд░ рдХреА health рдХреЛ next level рдкрд░ рд▓реЗ рдЬрд╛рдиреЗ рдХреЗ рд▓рд┐рдП рдПрдХ exclusive FREE workshop рдореЗрдВ participate рдХрд░рдирд╛ рдЪрд╛рд╣реЗрдВрдЧреЗ?",
    name: "q10",
    options: [
      "тЬУ рдЬрд░реВрд░, workshop рдЪрд╛рд╣рд┐рдП",
      "тЬЧ рдлрд┐рд▓рд╣рд╛рд▓ рдирд╣реАрдВ",
    ],
  },
  {
    label: "11. рдЖрдкрдХрд╛ рд╕рдмрд╕реЗ рдмрдбрд╝рд╛ concern рдХреНрдпрд╛ рд╣реИ - family рдХреА immediate health, daily energy levels, рдпрд╛ future рдХреА рдмреАрдорд╛рд░рд┐рдпреЛрдВ рд╕реЗ рдмрдЪрд╛рд╡?",
    name: "q11",
    options: [
      "ЁЯТЪ Family рдХреА health",
      "ЁЯЫбя╕П Future protection",
    ],
  },
]

export default function WellnessSurveyModal({ open, onClose }: WellnessSurveyModalProps) {
  const [step, setStep] = useState<number>(0)
  const [answers, setAnswers] = useState<Answers>({})
  const [loading, setLoading] = useState<boolean>(false)
  const [success, setSuccess] = useState<boolean>(false)

  if (!open) return null

  const handleOption = (name: string, value: string): void => {
    setAnswers({ ...answers, [name]: value })
  }

  const handleNext = (): void => setStep((s) => s + 1)
  const handlePrev = (): void => setStep((s) => (s > 0 ? s - 1 : 0))

  const handleSubmit = (e: React.FormEvent<HTMLFormElement>): void => {
    e.preventDefault()
    setLoading(true)
    
    // Format WhatsApp message
    let msg = 'рдирдорд╕реНрддреЗ Tejesh рдЬреА! ЁЯЩП\n\nрдореИрдВрдиреЗ рдЖрдкрдХрд╛ wellness survey рднрд░рд╛ рд╣реИред рдпрд╣рд╛рдБ рдореЗрд░реЗ responses рд╣реИрдВ:\n\n'
    questions.forEach((q, idx) => {
      msg += `${idx + 1}. ${answers[q.name] || ""}\n`
    })
    
    if (answers.q9 === "ЁЯФе рдЕрднреА рддреБрд░рдВрдд!") {
      msg += '\n[URGENT] рдореБрдЭреЗ рддреБрд░рдВрдд рдЬрд╛рдирдХрд╛рд░реА рдЪрд╛рд╣рд┐рдПред\n'
    }
    
    msg += '\nрдХрдм рдорд┐рд▓ рд╕рдХрддреЗ рд╣реИрдВ? Call рдпрд╛ meet - рдЬреЛ рднреА convenient рд╣реЛред'

    setTimeout(() => {
      setLoading(false)
      setSuccess(true)
      window.open(
        `https://api.whatsapp.com/send?phone=918770343316&text=${encodeURIComponent(msg)}`, 
        "_blank"
      )
      setTimeout(() => onClose(), 3000)
    }, 1500)
  }

  const currentQuestion = questions[step]

  return (
    <div className="fixed inset-0 z-50 flex items-center justify-center bg-black/50 p-4">
      <div className="bg-white rounded-lg shadow-xl max-w-xl w-full max-h-[90vh] overflow-y-auto">
        {/* Header */}
        <div className="bg-gradient-to-r from-teal-500 to-teal-400 text-white p-6 text-center rounded-t-lg">
          <h1 className="text-2xl font-bold">тЬи Wellness Survey</h1>
          <p className="font-medium mt-1">
            рдЖрдкрдХреА рд╕реЗрд╣рдд рдХреА рдЬрд╛рдирдХрд╛рд░реА рдХреЗ рд▓рд┐рдП рдХреБрдЫ рд╕рд╡рд╛рд▓
          </p>
        </div>

        <form onSubmit={handleSubmit}>
          {/* Progress */}
          {!loading && !success && (
            <div className="p-4">
              <div className="text-sm text-gray-500 text-center mb-2">
                рдкреНрд░рд╢реНрди {step + 1} of {questions.length}
              </div>
              <div className="w-full h-2 bg-teal-100 rounded-full mb-4">
                <div
                  className="h-full rounded-full bg-gradient-to-r from-teal-300 to-teal-500 transition-all duration-300"
                  style={{ width: `${((step + 1) / questions.length) * 100}%` }}
                />
              </div>
            </div>
          )}

          {/* Questions */}
          {!loading && !success && currentQuestion && (
            <div className="px-6 pb-6">
              <div className="mb-6">
                <h2 className="font-semibold text-lg mb-4 leading-relaxed text-gray-800">
                  {currentQuestion.label}
                </h2>
                <div className="flex flex-col gap-3">
                  {currentQuestion.options.map((option, i) => (
                    <label
                      key={i}
                      className={`flex items-center gap-3 p-4 rounded-lg border-2 transition-all duration-200 cursor-pointer hover:border-teal-300 hover:bg-teal-25
                        ${answers[currentQuestion.name] === option
                          ? "border-teal-500 bg-teal-50 shadow-sm"
                          : "border-teal-100 bg-white"
                        }
                      `}
                    >
                      <input
                        type="radio"
                        name={currentQuestion.name}
                        value={option}
                        checked={answers[currentQuestion.name] === option}
                        onChange={() => handleOption(currentQuestion.name, option)}
                        className="accent-teal-500 w-4 h-4"
                      />
                      <span className="font-medium text-gray-700 flex-1">{option}</span>
                    </label>
                  ))}
                </div>
              </div>

              <div className="flex gap-4 justify-between pt-4 border-t border-gray-100">
                <button
                  type="button"
                  className={`px-6 py-3 border border-teal-200 text-teal-600 rounded-lg font-semibold transition-all duration-200 hover:bg-teal-50 hover:border-teal-300 ${
                    step === 0 ? 'opacity-50 cursor-not-allowed' : ''
                  }`}
                  onClick={handlePrev}
                  disabled={step === 0}
                >
                  тмЕя╕П рд╡рд╛рдкрд╕
                </button>
                {step < questions.length - 1 ? (
                  <button
                    type="button"
                    className={`px-6 py-3 bg-teal-500 text-white rounded-lg font-semibold transition-all duration-200 hover:bg-teal-600 hover:shadow-md ${
                      !answers[currentQuestion.name] ? 'opacity-50 cursor-not-allowed' : ''
                    }`}
                    onClick={handleNext}
                    disabled={!answers[currentQuestion.name]}
                  >
                    рдЖрдЧреЗ рдмрдврд╝реЗрдВ тЮбя╕П
                  </button>
                ) : (
                  <button
                    type="submit"
                    className={`px-6 py-3 bg-teal-500 text-white rounded-lg font-semibold transition-all duration-200 hover:bg-teal-600 hover:shadow-md ${
                      !answers[currentQuestion.name] ? 'opacity-50 cursor-not-allowed' : ''
                    }`}
                    disabled={!answers[currentQuestion.name]}
                  >
                    тЬЕ рд╕рдмрдорд┐рдЯ рдХрд░реЗрдВ
                  </button>
                )}
              </div>
            </div>
          )}

          {/* Loading State */}
          {loading && (
            <div className="py-20 flex flex-col items-center justify-center">
              <div className="w-10 h-10 border-4 border-teal-200 border-t-teal-500 rounded-full animate-spin mb-4" />
              <p className="text-gray-600">рдЖрдкрдХрд╛ response submit рд╣реЛ рд░рд╣рд╛ рд╣реИ...</p>
            </div>
          )}

          {/* Success State */}
          {success && (
            <div className="text-center py-16 px-6">
              <div className="text-4xl mb-4">ЁЯОЙ</div>
              <h3 className="text-xl font-bold text-teal-600 mb-2">рдзрдиреНрдпрд╡рд╛рдж!</h3>
              <p className="text-gray-600 leading-relaxed">
                рдЖрдкрдХрд╛ survey successfully submit рд╣реЛ рдЧрдпрд╛ рд╣реИред<br />
                рд╣рдо рдЬрд▓реНрдж рд╣реА рдЖрдкрд╕реЗ WhatsApp рдкрд░ contact рдХрд░реЗрдВрдЧреЗред
              </p>
            </div>
          )}
        </form>

        {/* Close Button */}
        <button
          type="button"
          onClick={onClose}
          className="absolute top-4 right-4 text-white hover:text-teal-200 text-2xl font-bold w-8 h-8 flex items-center justify-center rounded-full hover:bg-white/10 transition-all duration-200"
          tabIndex={-1}
          aria-label="Close Survey"
        >
          ├Ч
        </button>
      </div>
    </div>
  )
}
